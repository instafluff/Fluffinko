{% extends 'layout.twig' %}

{% block body %}
	<div id="fluffinko"></div>
	<script>
		var config = {
			type: Phaser.AUTO,
			width: 800,
			height: 800,
    	transparent: true,
			parent: 'fluffinko',
			physics: {
					default: 'arcade',
					arcade: {
							// debug: true,
							gravity: { y: 200 }
					}
			},
			scene: {
					preload: preload,
					create: create,
					update: update
			}
		};

		var game = new Phaser.Game(config);
		var phaser = undefined;
		var blocks = [];
		var collisions;
		var colliders = {};
		var balls = {};
		var walls = [];
		var star;
		var winners = {};
		var winnerText;
		var refreshTimer = null;

		function preload ()
		{
			this.load.image('wizball', 'images/pika.png');
			this.load.image('peg', 'images/peg.png');
			this.load.image('wall', 'images/wall.png');
			this.load.image('star', 'images/star.png');
		}

		function create ()
		{
			phaser = this;
			this.game.antialias = true;
			this.game.clearBeforeRender = true;
			winnerText = this.add.text( 500, 100, "Winners!" );
			winnerText.setScale( 2 );
			startGame();
		}

		function update() {
			for( var marble in balls ) {
				var marbleObj = balls[ marble ];
				marbleObj.text.x = marbleObj.object.x;
				marbleObj.text.y = marbleObj.object.y - 35;

				if( marbleObj.object.y > 750 && Math.abs(marbleObj.object.body.velocity.y) < 10 ) {
					if( colliders[ marbleObj.object.name ] ) {
						phaser.physics.world.removeCollider(colliders[ marbleObj.object.name ]);
						delete colliders[ marbleObj.object.name ];

						if( marbleObj.object.x > 320 && marbleObj.object.x < 480 ) {
							// Winner!
							winners[ marbleObj.object.name ] = true;
							client.say("#{{ username }}", "/me " + marbleObj.object.name + " is a WINNER!" );
							console.log( Object.keys( winners ) );
							winnerText.setText( "Winners!\n" + Object.keys( winners ).join( "\n" ) );
						}
					}
				}
			}
		}

		function startGame() {
			collisions = phaser.physics.add.group({
				bounceX: 0.95, bounceY: 0.6,
				// bounceX: 1, bounceY: 1,
				collideWorldBounds: true
			});
			for( var row = 0; row < 6; row++ ) {
				for( var i = 0; i < 14; i++ ) {
					var peg = phaser.physics.add.image( i * 60 + ( row % 2 > 0 ? 10 : 40 ), row * 100 + 200, "peg" );
					peg.setOffset( 8, 8 );
					peg.setCircle( 1 );
					peg.setBounce( 1 );
					// console.log( peg );
					peg.setFriction( 0, 0 );
					peg.body.immovable = true;
					peg.body.moves = false;
					peg.setMass( 0.1 );
					blocks.push( peg );
				}
			}
			for( var i = 0; i < 4; i++ ) {
				var wall = phaser.physics.add.staticImage(i * 160 + 160, 775, 'wall');
				walls.push( wall );
			}
			star = phaser.physics.add.staticImage( 400, 760, "star" );
		}

		function addUser( username ) {
			if( !balls[ username ] ) {
				var dropPosition = getRandomInt(768);
				// var userMarble = phaser.physics.add.image(dropPosition, 65, 'wizball');
				var userMarble = collisions.create(dropPosition, -165, 'wizball');
				var userText = phaser.add.text(dropPosition, -190, username);
				userText.setOrigin( 0.5 );
				userMarble.name = username;
				userMarble.setCircle(16);
				userMarble.setDrag( 0, 0 );
				userMarble.body.allowDrag = false;
				// userMarble.body.stopVelocityOnCollide = false;
				userMarble.allowRotation = true;
				// userMarble.setMass( 10 );
				// userMarble.setCollideWorldBounds(true);
				// userMarble.setBounce(1);
				// userMarble.setVelocity(getRandomInt(600)-300, getRandomInt(200));
				colliders[ username ] = phaser.physics.add.collider(userMarble, collisions);
				phaser.physics.add.collider(userMarble, walls, (marble, block) => {
					if( !marble.body.isMoving && marble.y < block.y ) {
						marble.setVelocity( getRandomInt( 200 ) - 100, -20 );
					}
				});
				phaser.physics.add.collider(userMarble, blocks, (marble, block) => {
					if( !marble.body.isMoving && marble.y < block.y ) {
						marble.setVelocity( ( getRandomInt( 100 ) + 20 ) * ( marble.x < block.x ? -1 : 1 ), -100 );
					}
				});
				balls[ username ] = {
					text: userText,
					object: userMarble
				}
			}
		}

		function getRandomInt(max) {
		  return Math.floor(Math.random() * Math.floor(max));
		}

		var client = null;

		$( document ).ready(function() {
			$("#fluffinko").hide();

			var options = {
				options: {
					debug: false
				},
				connection: {
					reconnect: true,
				},
				identity: {
					username: "{{ username }}",
				    password: "{{ oauth }}"
				},
				channels: ["#{{ username }}"]
			};

			client = new tmi.client(options);

			// Connect the client to the server..
			client.connect();

			client.on("chat", function (channel, userstate, message, self) {
				if( message == "!boingboing" ) {
					addUser( userstate["display-name"] );

					$("#fluffinko").show();
					if( refreshTimer ) {
						clearTimeout( refreshTimer );
					}
					refreshTimer = setTimeout(() => {
						location.reload();
					}, 90000);
				}
			});
		});
	</script>
{% endblock %}
